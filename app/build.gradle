// IMPORTANT:
// -> To build directly using prebuilt libraries (*.so), comment the "externalNativeBuild" blocks
// from below. Also make sure the prebuilt libs (.so) are inside the following folders
// (automatically generated and copied after building from source):
// /project-root/app/src/debug/jniLibs (for a debug build)
// /project-root/app/src/main/jniLibs (for a release build)
// Note: A backup of these prebuilt native libraries is on /project-root/libs/[debug/release]
//
// -> To build from source, make sure the "externalNativeBuild" blocks below are uncommented. Also,
// ensure you have the liblsl source code folder on the project-root, including the modification of
// CMakeLists.txt on it (it includes the "generate_xdf" target, which is not included by default).
// Last but not least, do not forget to include the .cpp and .h files inside liblsl/src/xdfwriter
// (from LabRecorder app source code) and the custom generate_xdf.cpp file from this project.

apply plugin: 'com.android.application'

def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(file('../keystore.properties')))

android {
    signingConfigs {
        debug {
            storeFile file('key.jks')
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
        release {
            storeFile file('key.jks')
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }
    compileSdk 33
    defaultConfig {
        applicationId 'com.example.aliayubkhan.LSLReceiver'
        minSdkVersion 26
        versionCode 1       // increment with every release
        versionName '1.16.2'   // change with every release
        setProperty('archivesBaseName', "LSLRecorder-$versionName")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your app.
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
//        externalNativeBuild.cmake {
//            arguments "-DANDROID_CPP_FEATURES=rtti exceptions", "-DANDROID_PLATFORM=24"
//            targets "lsl", "generate_xdf"
//        }
    }
//    externalNativeBuild.cmake {
//        path "../liblsl/CMakeLists.txt"
//    }
    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    packagingOptions {
        jniLibs {
            pickFirsts += ['**/lib/**']
        }
        resources {
            pickFirsts += ['**/lib/**']
        }
    }

    buildToolsVersion = '34.0.0'
    ndkVersion '25.2.9519653'
    namespace 'com.example.aliayubkhan.LSLReceiver'
}

dependencies {
    implementation fileTree(dir: '../libs', include: ['*.jar'])
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'net.java.dev.jna:jna:5.13.0@aar'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    testImplementation 'junit:junit:4.13.2'
}

// copy native libraries to per project location
tasks.register('copyDebugJniLibs', Copy) {
    from '../app/build/intermediates/merged_native_libs/debug/out/lib'
    into '../app/src/debug/jniLibs'
    include('**/*.*')
    exclude 'mips*', 'armeabi'
}
tasks.register('copyReleaseJniLibs', Copy) {
    from '../app/build/intermediates/stripped_native_libs/release/out/lib'
    into '../app/src/main/jniLibs'
    include('**/*.*')
    exclude 'mips*', 'armeabi'
}

// backup native libraries to per project location
tasks.register('backupDebugJniLibs', Copy) {
    from '../app/src/debug/jniLibs'
    into '../libs/debug'
    include('**/*.*')
}
tasks.register('backupReleaseJniLibs', Copy) {
    from '../app/src/main/jniLibs'
    into '../libs/release'
    include('**/*.*')
}

tasks.configureEach { task ->
    if (task.name == 'assembleDebug') task.finalizedBy('copyDebugJniLibs')
    if (task.name == 'assembleRelease') task.finalizedBy('copyReleaseJniLibs')
    if (task.name == 'copyDebugJniLibs') task.finalizedBy('backupDebugJniLibs')
    if (task.name == 'copyReleaseJniLibs') task.finalizedBy('backupReleaseJniLibs')
}
